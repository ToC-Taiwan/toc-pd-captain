// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"
	entity "tpc/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetUserByUserName mocks base method.
func (m *MockUser) GetUserByUserName(userName string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", userName)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockUserMockRecorder) GetUserByUserName(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockUser)(nil).GetUserByUserName), userName)
}

// InsertUser mocks base method.
func (m *MockUser) InsertUser(record *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserMockRecorder) InsertUser(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUser)(nil).InsertUser), record)
}

// UpdateUserByUsername mocks base method.
func (m *MockUser) UpdateUserByUsername(userName string, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByUsername", userName, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByUsername indicates an expected call of UpdateUserByUsername.
func (mr *MockUserMockRecorder) UpdateUserByUsername(userName, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByUsername", reflect.TypeOf((*MockUser)(nil).UpdateUserByUsername), userName, user)
}
